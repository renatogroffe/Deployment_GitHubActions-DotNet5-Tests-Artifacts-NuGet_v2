name: dotnet5-tests-coverlet-nuget

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  CAMINHO_PROJETO_TESTES: ./Groffe.AspNetCore.Indisponibilidade.Testes
  CAMINHO_PROJETO: ./Groffe.AspNetCore.Indisponibilidade/Groffe.AspNetCore.Indisponibilidade.csproj
  NUGET_SERVER: https://api.nuget.org/v3/index.json

jobs:
  tests:

    runs-on: ubuntu-20.04

    steps:
    - uses: actions/checkout@v2.3.4

    - name: Setup .NET 5
      uses: actions/setup-dotnet@v1.7.2
      with:
        dotnet-version: 5.0.103

    - name: Testes com .NET 5 + xUnit + Fluent Assertions + Mock Objects + Coverlet
      run: dotnet test ${{ env.CAMINHO_PROJETO_TESTES }} --verbosity minimal --logger:"html;LogFileName=resultado-testes.html" --collect:"XPlat Code Coverage"

    - name: Instalar ReportGenerator
      if: always()
      run: dotnet tool install --global dotnet-reportgenerator-globaltool --version 4.8.6
  
    - name: Gerar relatório de cobertura de testes com ReportGenerator
      if: always()
      run: |
        cd ${{ env.CAMINHO_PROJETO_TESTES }}/TestResults
        # Acessar diretório gerado com o XML de Cobertura de código
        cd $(ls -d */|head -n 1)
        reportgenerator "-reports:coverage.cobertura.xml" "-targetdir:coveragereport" -reporttypes:Html

    - name: Upload como Artifact dos Reports de Resultado dos Testes + Cobertura de Código
      uses: actions/upload-artifact@v2.2.2
      env:
        CAMINHO_RESULTADO_TESTES: ${{ env.CAMINHO_PROJETO_TESTES }}/TestResults/
      if: always()
      with:
        name: resultado-testes
        path: ${{ env.CAMINHO_RESULTADO_TESTES }}
        retention-days: 30

  pack-push:
    needs: [tests]

    runs-on: ubuntu-20.04

    steps:
    - uses: actions/checkout@v2.3.4

    - name: Setup .NET 5
      uses: actions/setup-dotnet@v1.7.2
      with:
        dotnet-version: 5.0.103

    - name: Geração do package
      run: dotnet pack ${{ env.CAMINHO_PROJETO }} -c Release -o out

    - name: Push no NuGet
      run: |
        cd out
        dotnet nuget push *.nupkg --api-key ${{ secrets.NUGET_API_KEY }} --source ${{ env.NUGET_SERVER }} --skip-duplicate